package com.onlineretailstore.controller;

import java.time.LocalDateTime;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.onlineretailstore.entity.Customer;
import com.onlineretailstore.exception.CustomerNotFoundException;
import com.onlineretailstore.exception.InvalidCustomerDataException;
import com.onlineretailstore.serviceImp.CustomerServiceImpl;

import ch.qos.logback.core.util.Duration;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/customer")
@Validated
public class CustomerController {

    private static final Logger logger = LoggerFactory.getLogger(CustomerController.class);

    @Autowired
    private CustomerServiceImpl customerService;

    @PostMapping("/addCustomer")
    public ResponseEntity<Customer> addCustomer(@Valid @RequestBody Customer customer) {
    	LocalDateTime startTime = LocalDateTime.now();
		logger.info("Entering addCustomer method");
        try {
            Customer createdCustomer = customerService.addCustomer(customer);
            logger.info("Customer added successfully: {}", createdCustomer);
            LocalDateTime endTime = LocalDateTime.now();
			Duration responseTime = Duration.between(startTime, endTime);
			logger.info("Response time of addCustomer() => " + responseTime.toMillis() + " ms");
            return new ResponseEntity<>(createdCustomer, HttpStatus.CREATED);
        } catch (InvalidCustomerDataException e) {
            logger.error("Invalid customer data: {}", e.getMessage());
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            logger.error("Error adding customer: {}", e.getMessage());
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/deleteCustomer/{customerId}")
    public ResponseEntity<Void> deleteCustomer(@PathVariable int customerId) {
        try {
            customerService.deleteCustomer(customerId);
            logger.info("Customer deleted successfully for ID: {}", customerId);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (CustomerNotFoundException e) {
            logger.warn("Customer not found for ID {}: {}", customerId, e.getMessage());
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            logger.error("Error deleting customer for ID {}: {}", customerId, e.getMessage());
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/updateCustomer/{customerId}")
    public ResponseEntity<Customer> updateCustomer(@PathVariable int customerId, @Valid @RequestBody Customer customer) {
        try {
            Customer updatedCustomer = customerService.updateCustomer(customerId, customer);
            logger.info("Customer updated successfully for ID: {}", customerId);
            return new ResponseEntity<>(updatedCustomer, HttpStatus.OK);
        } catch (CustomerNotFoundException e) {
            logger.warn("Customer not found for ID {}: {}", customerId, e.getMessage());
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch (InvalidCustomerDataException e) {
            logger.error("Invalid customer data: {}", e.getMessage());
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            logger.error("Error updating customer for ID {}: {}", customerId, e.getMessage());
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/searchCustomer/{customerId}")
    public ResponseEntity<Customer> searchCustomer(@Valid @PathVariable int customerId) {
        try {
            Customer cust = customerService.searchCustomer(customerId)
                    .orElseThrow(() -> new CustomerNotFoundException("Customer not found with ID: " + customerId));
            logger.info("Customer retrieved successfully for ID: {}", customerId);
            return new ResponseEntity<>(cust, HttpStatus.OK);
        } catch (CustomerNotFoundException e) {
            logger.warn("Customer not found for ID {}: {}", customerId, e.getMessage());
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            logger.error("Error retrieving customer for ID {}: {}", customerId, e.getMessage());
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
