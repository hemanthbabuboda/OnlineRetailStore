package com.onlineretailstore.order.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.onlineretailstore.order.entity.Order;
import com.onlineretailstore.order.exception.OrderNotFoundException; // Import the custom exception
import com.onlineretailstore.order.serviceImpl.OrderServiceImpl;

/**
 * Controller for managing orders in the online retail store. Provides RESTful
 * endpoints for creating, retrieving, updating, and deleting orders.
 */
@RestController
@RequestMapping("/api")
public class OrderController {

	@Autowired
	private OrderServiceImpl service;

	/**
	 * Adds a new order.
	 *
	 * @param order the order to be added
	 * @return a ResponseEntity containing the added order and HTTP status 201
	 *         (Created)
	 */
	@PostMapping("/order")
	public ResponseEntity<Order> addOrder(@RequestBody Order order) {
		return new ResponseEntity<>(service.addOrder(order), HttpStatus.CREATED);
	}

	/**
	 * Retrieves an order by its ID.
	 *
	 * @param orderId the ID of the order to retrieve
	 * @return a ResponseEntity containing the found order and HTTP status 200 (OK)
	 */
	@GetMapping("/order/{orderId}")
	public ResponseEntity<Order> getOrder(@PathVariable Integer orderId) {
		try {
			return new ResponseEntity<>(service.searchOrder(orderId), HttpStatus.OK);
		} catch (OrderNotFoundException e) {
			return new ResponseEntity<>(null, HttpStatus.NOT_FOUND); // Return 404 if not found
		}
	}

	/**
	 * Updates an existing order.
	 *
	 * @param orderId the ID of the order to update
	 * @param order   the new order data
	 * @return a ResponseEntity containing the updated order and HTTP status 200
	 *         (OK)
	 */
	@PutMapping("/order/{orderId}")
	public ResponseEntity<Order> updateOrder(@PathVariable Integer orderId, @RequestBody Order order) {
		try {
			return new ResponseEntity<>(service.updateOrder(orderId, order), HttpStatus.OK);
		} catch (OrderNotFoundException e) {
			return new ResponseEntity<>(null, HttpStatus.NOT_FOUND); // Return 404 if not found
		}
	}

	/**
	 * Deletes an order by its ID.
	 *
	 * @param orderId the ID of the order to delete
	 * @return a ResponseEntity containing a message indicating the result of the
	 *         deletion and HTTP status 200 (OK)
	 */
	@DeleteMapping("/order/{orderId}")
	public ResponseEntity<String> deleteOrder(@PathVariable Integer orderId) {
		try {
			return new ResponseEntity<>(service.deleteOrder(orderId), HttpStatus.OK);
		} catch (OrderNotFoundException e) {
			return new ResponseEntity<>("Order not found", HttpStatus.NOT_FOUND); // Return 404 if not found
		}
	}
}
